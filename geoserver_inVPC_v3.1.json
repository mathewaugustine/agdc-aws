{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "cloud formation for Geoserver in private subnet with public ELB",
	
	"Outputs": {
		"VPC" : {
            "Value" : {"Ref":"VPC"},
            "Description" : "VPC ID"
        }
		
    },
	
    "Parameters": {
        "VPC": {
             "Type": "String",
			 "Default": "vpc-576fc432",
			 "Description": "The VPC to where the instances has to be launched. eg vpc-576fc432"
        },
        "privatesubnet": {
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
        "publicsubnet": {
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
        "ImageId": {
            "Type": "String",
			"Default": "ami-33fe3b77",
			"Description" : "Image you need to be cloned in your Region eg: ami-33fe3b77"
			
        },
        "KeyName": {
            "Description": "The EC2 Key Pair to allow SSH access to the instances",
            "Default": "MyRecoveryKeysNEW",
			"Type": "String"
        }, 		
		"InstanceType": {
            "Default":"t2.micro",
            "Type": "String"
        },
        "GeoserverAZprivate": {
            "Default": "us-west-1b",
			"Type": "String"
        }
    },
	
	
    "Resources": {
        "ELBExternal": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "Subnets": {
                    "Ref": "publicsubnet"
                },
                "HealthCheck": {
                    "HealthyThreshold": "10",
                    "Interval": "30",
                    "Target": "HTTP:80/index.html",
                    "Timeout": "5",
                    "UnhealthyThreshold": "2"
                },
                "ConnectionDrainingPolicy": {
                    "Enabled": "true",
                    "Timeout": "300"
                },
                "ConnectionSettings": {
                    "IdleTimeout": "60"
                },
                "CrossZone": "true",
                "SecurityGroups": [
                    {
                        "Ref": "ELBEXTSG"
                    }
                ],
                "Listeners": [
                    {
                        "InstancePort": "80",
                        "LoadBalancerPort": "443",
                        "Protocol": "HTTPS",
                        "InstanceProtocol": "HTTP",
                        "SSLCertificateId": "arn:aws:iam::462472134991:server-certificate/test"
                    },
                    {
                        "InstancePort": "80",
                        "LoadBalancerPort": "80",
                        "Protocol": "HTTP",
                        "InstanceProtocol": "HTTP"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "External internetfacing ELB"
                    }
                ]
            }
        },
        "GeoserverInstancesASG": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones" : { "Fn::GetAZs" : "us-west-1c"},
                "Cooldown": "300",
                "DesiredCapacity": "1",
                "HealthCheckGracePeriod": "300",
                "HealthCheckType": "EC2",
				"MinSize": "1",
                "MaxSize": "2",
                "VPCZoneIdentifier": {
                    "Ref": "privatesubnet"
                },
                "LaunchConfigurationName": {
                    "Ref": "EC2InstanceLC"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "ELBExternal"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "EXP_Geoserver",
                        "PropagateAtLaunch": true
                    }
                ],
                "TerminationPolicies": [
                    "Default"
                ]
            }
        },
        "EC2InstanceLC": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "ImageId": {
                    "Ref": "ImageId"
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "SecurityGroups": [
                    {
                        "Ref": "EC2InstanceSG"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvda",
                        "Ebs": {
                            "VolumeSize": 8
                        }
                    }
                ],
				
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": 
						[ "",	[
                            "echo test > /tmp/ec2bycloudform;",
							"echo '<?php phpinfo();?>' > /var/www/html/index.html;",
							"echo 'AddType application/x-httpd-php .html' >> /etc/httpd/conf/httpd.conf;",
							"service httpd restart;"
							]
                        ]
                    }
                }
				

            }
        },
        "EC2InstanceSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "SG for EC2 instances in Geoserver",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "EC2InstanceSG"
                    }
                ]
            }
        },
        "ELBSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Geoserver ELB SG http and https",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Geoserver_Internal_ELB_SG"
                    }
                ]
            }
        },
        "ASGLCSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "AutoScaling-Security-Group for Geoserver",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "ASG_LC_SG"
                    }
                ]
            }
        },
        "ELBEXTSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "external internet facing ELB SG",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Externl internet facing ELB SG allow http/s"
                    }
                ]
            }
        },
        "scalingDecreaseGroupSize": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "GeoserverInstancesASG"
                },
                "Cooldown": "60",
                "ScalingAdjustment": "-1"
            }
        },
        "scalingIncreaseGroupSize": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "GeoserverInstancesASG"
                },
                "Cooldown": "60",
                "ScalingAdjustment": "1"
            }
        },
        "alarmawsec2GeoserverInstancesCPUUtilization10percent": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "ActionsEnabled": "true",
                "ComparisonOperator": "GreaterThanOrEqualToThreshold",
                "EvaluationPeriods": "1",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Period": "300",
                "Statistic": "Minimum",
                "Threshold": "10.0",
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": "Geoserver Instances"
                    }
                ]
            }
        },
        "alarmawsec2GeoserverInstancesHighCPUUtilization5percent": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "ActionsEnabled": "true",
                "ComparisonOperator": "LessThanThreshold",
                "EvaluationPeriods": "1",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Period": "300",
                "Statistic": "Minimum",
                "Threshold": "5.0",
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": "Geoserver Instances"
                    }
                ]
            }
        },
        "ingress1": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "EC2InstanceSG"
                },
                "IpProtocol": "tcp",
                "FromPort": "22",
                "ToPort": "22",
                "CidrIp": "10.0.0.0/24"
            }
        },
        "ingress2": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "EC2InstanceSG"
                },
                "IpProtocol": "tcp",
                "FromPort": "80",
                "ToPort": "80",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "ingress3": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "EC2InstanceSG"
                },
                "IpProtocol": "tcp",
                "FromPort": "443",
                "ToPort": "443",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "ingress4": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "ELBSG"
                },
                "IpProtocol": "tcp",
                "FromPort": "80",
                "ToPort": "80",
                "CidrIp": "10.0.0.0/24"
            }
        },
        "ingress5": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "ELBSG"
                },
                "IpProtocol": "tcp",
                "FromPort": "443",
                "ToPort": "443",
                "CidrIp": "10.0.0.0/24"
            }
        },
        "ingress6": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "ASGLCSG"
                },
                "IpProtocol": "tcp",
                "FromPort": "22",
                "ToPort": "22",
                "CidrIp": "10.0.0.0/24"
            }
        },
        "ingress7": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "ELBEXTSG"
                },
                "IpProtocol": "tcp",
                "FromPort": "80",
                "ToPort": "80",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "ingress8": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "ELBEXTSG"
                },
                "IpProtocol": "tcp",
                "FromPort": "443",
                "ToPort": "443",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "egress1": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {
                    "Ref": "EC2InstanceSG"
                },
                "IpProtocol": "-1",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "egress2": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {
                    "Ref": "ELBSG"
                },
                "IpProtocol": "-1",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "egress3": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {
                    "Ref": "ASGLCSG"
                },
                "IpProtocol": "-1",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "egress4": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {
                    "Ref": "ELBEXTSG"
                },
                "IpProtocol": "-1",
                "CidrIp": "0.0.0.0/0"
            }
        }
    }
    
}